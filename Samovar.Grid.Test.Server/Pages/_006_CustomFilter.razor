@page "/_006_CustomFilter"
@using System.Linq

@inject WeatherForecastService ForecastService

<h1>Code behind custom filter</h1>

<button class="btn btn-primary" @onclick="CustomFilter">custom filter</button>
<button class="btn btn-primary" @onclick="ResetFilter">clear filter</button>

<SamovarGrid @ref="grid" 
             Data="@forecasts"
             OrderFieldByDefault="@nameof(WeatherForecast.TemperatureC)"
             OrderDesc="true"
             PageSize="25"
             SelectedRowClass="bg-warning"
             FilterMode="@GridFilterMode.Custom"
             AfterFilter="AfterFilter">
    <GridColumns>
        <GridColumn Title="Pos" Field="@nameof(WeatherForecast.Position)" />
        <GridColumn Title="Date" Field="@nameof(WeatherForecast.Date)" />
        <GridColumn Title="TemperatureC" Field="@nameof(WeatherForecast.TemperatureC)" />
        <GridColumn Title="TemperatureF" Field="@nameof(WeatherForecast.TemperatureF)" />
        <GridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)" />
        <GridCommandColumn Width="110px" />
    </GridColumns>
</SamovarGrid>

@code{
    List<WeatherForecast> forecasts = new List<WeatherForecast>();
    SamovarGrid<WeatherForecast> grid { get; set; }

    protected override async Task OnInitializedAsync()
    {
        forecasts = (await ForecastService.GetForecastAsync(DateTime.Now, 1000)).ToList();
    }

    int filtered;

    void AfterFilter(GridFilterEventArgs args)
    {
        filtered++;
    }

    async Task CustomFilter()
    {
        //Func<WeatherForecast, bool> filter = w => w.TemperatureC > 15;
        await grid.ApplyCustomFilter(w => w.TemperatureC > 15);
    }

    async Task ResetFilter()
    {
        grid.ResetFilterAsync();
    }
}