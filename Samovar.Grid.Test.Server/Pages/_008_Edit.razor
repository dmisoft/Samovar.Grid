@page "/_008_Edit"

@inject WeatherForecastService ForecastService

<h1>Edit mode</h1>
<button @onclick="replace">replace</button>
<form>
    <div class="form-group row mb-2">
        <label for="gridEditMode" class="col-2 col-form-label">Edit mode:</label>
        <div class="col-4">
            <select id="gridEditMode" @bind="editMode" class="custom-select">
                <option value="@GridEditMode.Form">Form</option>
                <option value="@GridEditMode.Popup">Popup</option>
            </select>
        </div>
    </div>
</form>

<SamovarGrid TItem="WeatherForecast"
             Data="@data"
             OrderFieldByDefault="@nameof(WeatherForecast.Position)"
             OrderDesc="false"
             PageSize="25"
             SelectedRowClass="bg-warning"
             Height="600px"
             EditMode="editMode"
             RowEditCommit="OnRowEditCommitEvt">
    <GridColumns>
        <GridColumn Title="Pos" Field="@nameof(WeatherForecast.Position)" />
        <GridColumn Title="Date" Field="@nameof(WeatherForecast.Date)" />
        <GridColumn Title="TemperatureC" Field="@nameof(WeatherForecast.TemperatureC)">
            <CellEditTemplate>
                @{
                    WeatherForecast data = context as WeatherForecast;
                    <select @bind="data.TemperatureC" class="form-control">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                    </select>
                }
            </CellEditTemplate>
        </GridColumn>
        <GridColumn Title="TemperatureF" Field="@nameof(WeatherForecast.TemperatureF)" />
        <GridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)" />
        <GridCommandColumn Width="110px" />
    </GridColumns>
</SamovarGrid>

@code {
    List<WeatherForecast> data;
    GridEditMode editMode = GridEditMode.Form;

    protected override async Task OnInitializedAsync()
    {
        data = (await ForecastService.GetForecastAsync(DateTime.Now, 100)).ToList();
    }

    Task OnRowEditCommitEvt(GridRowEditEventArgs<WeatherForecast> args)
    {
        WeatherForecast oldData = args.OldData;
        WeatherForecast newData = args.NewData;
        data[data.IndexOf(oldData)] = newData;
        return Task.CompletedTask;
    }
    /*
    void OnRowEditCommit(GridRowEditEventArgs<WeatherForecast> args)
    {
        WeatherForecast oldData = args.OldData;
        WeatherForecast newData = args.NewData;
        data[data.IndexOf(oldData)] = newData;
    }*/
    void replace()
    {
        //data[0].Date = DateTime.Now;
        data[0] = new WeatherForecast();
    }
}