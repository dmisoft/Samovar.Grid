@page "/_002_DataBinding_ObservableCollection"
@using System.Linq
@using System.Collections.ObjectModel

@inject WeatherForecastService ForecastService

<h4>Observable collection</h4>
<button class="btn btn-primary" @onclick="AddNewRow">add new row</button>
<button class="btn btn-primary" @onclick="RemoveFirstRow">remove first row</button>
<button class="btn btn-primary" @onclick="ClearDataSet">clear data set</button>

<SamovarGrid @ref="grid"
             Data="@forecasts"
             Height="600px"
             PageSize="20"
             EditMode="GridEditMode.Popup"
             RowInserting="((newRow) => RowInsertingHandler(newRow))"
             RowDeleting="OnRowDeleting">
    <GridColumns>
        <GridColumn Title="Pos" Field="@nameof(WeatherForecast.Position)" />
        <GridColumn Title="Date" Field="@nameof(WeatherForecast.Date)" />
        <GridColumn Title="TemperatureC" Field="@nameof(WeatherForecast.TemperatureC)">
            <CellEditTemplate>
                @{
                    WeatherForecast data = context as WeatherForecast;
                    <select @bind="data.TemperatureC" class="form-control">
                        <option value="10">10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                    </select>
                }
            </CellEditTemplate>
        </GridColumn>
        <GridColumn Title="TemperatureF" Field="@nameof(WeatherForecast.TemperatureF)" />
        <GridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)" />
        <GridCommandColumn Width="110px" />
    </GridColumns>
</SamovarGrid>

@code{
    ObservableCollection<WeatherForecast> forecasts;
    SamovarGrid<WeatherForecast> grid;

    protected override async Task OnInitializedAsync()
    {
        forecasts = new ObservableCollection<WeatherForecast>(await ForecastService.GetForecastAsync(DateTime.Now, 10));
    }

    void AddNewRow()
    {
        forecasts.Insert(0, new WeatherForecast
        {
            Position = -1,
            Date = new DateTime(2019, 1, 1),
            Summary = "Summary (Pos -1)",
            Summary2 = "Summary2",
            TemperatureC = 33
        });
    }

    void RemoveFirstRow()
    {
        if (forecasts.Count() > 0)
            forecasts.RemoveAt(0);
    }

    void ClearDataSet()
    {
        forecasts.Clear();
    }

    void RowInsertingHandler(WeatherForecast data)
    {
        forecasts.Add(data);
    }

    void OnRowDeleting(WeatherForecast dataItem)
    {
        forecasts.Remove(dataItem);
    }

    async Task RowEditCommitHandlerAsync(GridRowEditEventArgs<WeatherForecast> args)
    {
        WeatherForecast oldData = args.OldData;
        WeatherForecast newData = args.NewData;

        forecasts[forecasts.IndexOf(oldData)] = newData;

        //await grid.RefreshAsync();
    }
}