@page "/_004_CommandColumn"

@using System.Linq

@inject WeatherForecastService ForecastService
@implements IDisposable

<h1>Command column</h1>

<SamovarGrid Data="@forecasts"
             OrderFieldByDefault="@nameof(WeatherForecast.TemperatureC)"
             OrderDesc="true"
             PageSize="20"
             PagerSize="5"
             Height="@gridHeight"
             Width="@gridWidth"
             RowSelected="RowSelectedHandler"
             RowDeletingAsync="OnRowDeletingAsync"
             RowEditBegin="@((WeatherForecast data)=>RowEditBeginHandler(data))"
             RowEditCancel="RowEditCancelHandler"
             AfterFilter="AfterFilter"
             AfterSort="AfterSort"
             AfterPageChange="AfterPageChange"
             SelectedRowClass="my-selected-row-color"
             Headless="false" EditMode="GridEditMode.Form"
             RowInsertingAsync="((newRow) => OnRowInsertingAsync(newRow))" 
             @ref="grid">
    <GridColumns>
        <GridCommandColumn Width="120px" />
        <GridColumn Title="Pos" Field="@nameof(WeatherForecast.Position)" Width="100px" />
        <GridColumn Title="Date" Field="@nameof(WeatherForecast.Date)" />
        <GridColumn Title="TemperatureC" Field="@nameof(WeatherForecast.TemperatureC)" />
        <GridColumn Title="TemperatureF" Field="@nameof(WeatherForecast.TemperatureF)" />
        <GridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)" />
    </GridColumns>
</SamovarGrid>

<h4>Grid items</h4>
<div>@forecasts.Count().ToString()</div>

<h4>Action</h4>
<div>@selectedAction</div>

<h4>Action row item</h4>
<div>@actionItem</div>

@code{
    SamovarGrid<WeatherForecast> grid;

    string gridHeight = "600px";
    string gridWidth = "100%";

    string selectedAction { set; get; }
    string actionItem { set; get; }

    private List<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = (await ForecastService.GetMockData()).ToList();
    }

    void RowSelectedHandler(WeatherForecast data)
    {
        actionItem = data.Summary;
        selectedAction = "RowSelected";
    }

    void OnRowDeleting(WeatherForecast dataItem)
    {
        forecasts.Remove(dataItem);
    }

    async Task OnRowDeletingAsync(WeatherForecast dataItem)
    {
        forecasts.Remove(dataItem);
        await grid.RefreshAsync();
    }

    void RowDeleteCancelHandler(GridRowEventArgs args)
    {
        actionItem = ((WeatherForecast)args.RowData).Summary;
        selectedAction = "RowDeleteCancel";
    }

    async Task RowEditCommitHandlerAsync(GridRowEditEventArgs<WeatherForecast> args)
    {
        WeatherForecast oldData = args.OldData;
        WeatherForecast newData = args.NewData;

        forecasts[forecasts.IndexOf(oldData)] = newData;

        await grid.RefreshAsync();
    }

    void RowEditBeginHandler(WeatherForecast item)
    {
        item.Summary = "wwwwwwww";
        actionItem = item.Summary;
        selectedAction = "RowEditBegin";
    }

    void RowEditCancelHandler()
    {
        selectedAction = "RowEditCancel";
    }

    //void RowDoubleClickHandler(WeatherForecast item)
    //{
    //    actionItem = item.Summary;
    //    selectedAction = "RowDoubleClickHandler";
    //}

    void AfterFilter(GridFilterEventArgs args)
    {
    }

    void AfterSort(GridSortEventArgs args)
    {
    }

    void AfterPageChange(GridPagingEventArgs args)
    {
    }

    async Task OnRowInsertingAsync(WeatherForecast data)
    {
        await InvokeAsync(() => forecasts.Insert(0, data));
        grid.ResetOrder();
        await grid.RefreshAsync();
    }

    public void Dispose()
    {
        forecasts.Clear();
    }
}