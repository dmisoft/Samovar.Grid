@page "/LastingTest"

@using System.Linq
@using System.Collections.ObjectModel

@inject WeatherForecastService ForecastService

<h1>Cell templating</h1>

<div style="font-size:12pt;">
    <input style="font-size:1em;" value="" placeholder="input value" />
    <button style="before;" class="btn btn-primary">ok</button>
</div>
<div class="d-flex justify-content-between">
    <button class="btn btn-primary" @onclick="LastingTest">lasting test</button>
    <h2>Lasting sequence number: @lastingSeqNumber.ToString()</h2>
    <h2>Datasize: @forecasts.Count()</h2>
</div>

<SamovarGrid Data="@forecasts"
             OrderFieldByDefault="@nameof(WeatherForecast.TemperatureC)"
             OrderDesc="true"
             PageSize="20"
             PagerSize="10"
             Height="@gridHeight"
             Headless="false"
             SelectedRowClass="bg-warning">
    <GridColumns>
        <GridColumn Title="Date" Width="100px">
            <CellShowTemplate>
                @{
                    WeatherForecast data = context as WeatherForecast;
                    <div>@data.Date.ToShortDateString()</div>
                }
            </CellShowTemplate>
        </GridColumn>
        <GridColumn Title="Date2" Field="@nameof(WeatherForecast.Date)" Width="200px" />
        <GridColumn Title="TemperatureC" Field="@nameof(WeatherForecast.TemperatureC)" Width="200px" />
        <GridColumn Title="TemperatureF" Field="@nameof(WeatherForecast.TemperatureF)" Width="150px" />
        <GridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)" Width="150px">
            <CellEditTemplate>
                @{
                    WeatherForecast data = context as WeatherForecast;
                    <input style="width:100%;" type="text" @bind="@data.Summary" @oninput="onInput" />

                    void onInput(ChangeEventArgs args)
                    {
                    }
                }
            </CellEditTemplate>
            <CellShowTemplate>
                @{
                    WeatherForecast data = context as WeatherForecast;
                    <div style="word-break:break-all;">@data.Summary</div>
                }
            </CellShowTemplate>
        </GridColumn>
        <GridCommandColumn Width="120px" />
    </GridColumns>
</SamovarGrid>



<div class="form-group">
    <label class="mr-2">Grid height</label>
    <input @bind-value="@gridHeight" @bind-value:event="onchange" />
</div>

@code{
    string gridHeight = "500px";
    int lastingSeqNumber;

    ObservableCollection<WeatherForecast> forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = new ObservableCollection<WeatherForecast>(await ForecastService.GetForecastAsync(DateTime.Now, 20000));
    }

    void LastingTest()
    {
        Task.Run(async () =>
        {
            var rng = new Random();
            for (int i = 1; i <= 1000; i++)
            {
                forecasts.Clear();
                forecasts.Concat(await ForecastService.GetForecastAsync(DateTime.Now, rng.Next(4000, 10000)));
                this.lastingSeqNumber = i;
                await InvokeAsync(Refresh);
                System.Threading.Thread.Sleep(50);
            }
        });
    }

    void Refresh()
    {
        StateHasChanged();
    }
}