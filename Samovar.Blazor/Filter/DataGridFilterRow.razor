@using System.Globalization

@typeparam TItem
@inherits SmDesignComponentBase

<table style="margin:0;padding:0;table-layout:fixed;@(LayoutService.MinGridWidth.SubjectValue > 0 ? "min-width:" + LayoutService.MinGridWidth.SubjectValue.ToString(CultureInfo.InvariantCulture) + "px;" : "")" class="@LayoutService.TableTagClass.SubjectValue">
	<thead class="@LayoutService.TheadTagClass.SubjectValue">
		<tr @ref="LayoutService.GridFilterRef">
			@if (LayoutService.ShowDetailRow.SubjectValue)
			{
				<th style="@(ColumnService.DetailExpanderColumnModel.VisibleWidthStyle)" id="@(ColumnService.DetailExpanderColumnModel.FilterGridColumnCellId)">
					<div style="margin:0px;padding:0px;overflow:hidden;cursor:pointer;display:block;">&nbsp;</div>
				</th>
			}
			@foreach (IColumnModel colMeta in ColumnService.AllColumnModels)
			{
				switch (colMeta.ColumnType)
				{
					case DataGridColumnType.Data:
						<th style="@(((IDataColumnModel)colMeta).VisibleWidthStyle)" class="px-1" id="@(((IDataColumnModel)colMeta).FilterGridColumnCellId)" data-toggle="tooltip" data-placement="top" title="@(((IDataColumnModel)colMeta).Title.SubjectValue)">
							@if (((IDataColumnModel)colMeta).Field.SubjectValue != null && RepositoryService.PropInfo.ContainsKey(((IDataColumnModel)colMeta).Field.SubjectValue))
							{
								@switch (RepositoryService.PropInfo[((IDataColumnModel)colMeta).Field.SubjectValue].PropertyType)
								{
									case var t when t == typeof(DateTime) || t == typeof(DateTime?):
										<DataGridFilterCellDate TItem=TItem ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(string):
										<DataGridFilterCellString TItem=TItem ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(char):
										<DataGridFilterCellChar TItem=TItem ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(bool):
										<DataGridFilterCellBoolean TItem=TItem ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(byte) || t == typeof(byte?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="byte?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(sbyte) || t == typeof(sbyte?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="sbyte?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(short) || t == typeof(short?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="short?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(ushort) || t == typeof(ushort?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="ushort?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(int) || t == typeof(int?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="int?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(uint) || t == typeof(uint?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="uint?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(long) || t == typeof(long?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="long?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(ulong) || t == typeof(ulong?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="ulong?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(float) || t == typeof(float?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="float?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(double) || t == typeof(double?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="double?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									case var t when t == typeof(decimal) || t == typeof(decimal?):
										<DataGridFilterCellNumeric TEntity=TItem TValue="decimal?" ColMetadata="(IDataColumnModel)colMeta" />
										break;
									default:
										break;
								}
							}
						</th>
						break;
					case DataGridColumnType.Command:
						<th style="@(((ICommandColumnModel)colMeta).VisibleWidthStyle)" id="@(((ICommandColumnModel)colMeta).FilterGridColumnCellId)" data-toggle="tooltip" data-placement="top" title="@(((ICommandColumnModel)colMeta).Title)">
							<div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
								<button class="btn btn-sm btn-primary" @onclick="@(async ()=>{ await FilterService.ClearFilter(); })">
									Clear
								</button>
							</div>
						</th>

						break;
				}
			}
			<th style="@(ColumnService.EmptyColumnModel.VisibleWidthStyle)" id="@(ColumnService.EmptyColumnModel.FilterGridColumnCellId)">
				<div style="margin:0px;padding:0px;overflow:hidden;display:block;">&nbsp;</div>
			</th>
		</tr>
	</thead>
</table>