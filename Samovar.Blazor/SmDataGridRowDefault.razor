@typeparam T
@inherits SmDesignComponentBase


<tr id="@RowModel.HtmlElementId" style="cursor:pointer;"
    @onmousedown="@(()=>RowSelectedIntern(new GridRowEventArgs(RowModel.DataItem, RowModel.DataItemPosition), RowModel))"
    class="@(RowModel.RowSelected?$"{LayoutService.SelectedRowClass.Value}":"")">
    @if (LayoutService.ShowDetailRow.Value)
    {
        <td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;" @onmousedown="()=> { }" @onmousedown:stopPropagation @onclick="GridRow.DetailExpanderClick">
            <div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
                <span class="@(RowModel.RowDetailExpanded ? "oi oi-chevron-bottom" : "oi oi-chevron-right")"></span>
            </div>
        </td>
    }
    @foreach (IColumnModel colModel in ColumnService.AllColumnModels)
    {
        switch (colModel.ColumnType)
        {
            case DataGridColumnType.Data:
                var cellModel = RowModel.GridCellModels.SingleOrDefault(x => x.ColumnMetadata.Equals(colModel));
                if (cellModel != null)
                {
                    <td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;padding-right:0;">
                        @{
                            var cellShowTemplate = ((IDataColumnModel)colModel).CellShowTemplate.Value;
                        }
                        @if (cellShowTemplate is not null)
                        {
                            <div class="s-flex s-noselect" style="margin:0px;padding:0px;">
                                <div style="flex-grow:1;" class="ml-1 mr-0">
                                    @(cellShowTemplate(RowModel.DataItem!))
                                </div>
                                <div style="cursor:ew-resize;float:right;width:3px"></div>
                            </div>
                        }
                        else
                        {
                            <div class="s-flex s-noselect" style="margin:0px;padding:0px;">
                                <div style="flex-grow:1;" class="ml-1 mr-0">@cellModel.CellValue</div>
                                <div style="cursor:ew-resize;float:right;width:3px"></div>
                            </div>
                        }
                    </td>
                }

                break;
            case DataGridColumnType.Command:
                <td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;">
                    <div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
                        @if (((ICommandColumnModel)colModel).EditButtonVisible.Value)
                        {
                            <button style="margin-left:2px;margin-right:2px;" class="btn btn-primary btn-sm;" @onclick="@(()=>RowEditBegin(RowModel))" @onmousedown="()=> { }" @onmousedown:stopPropagation>edit</button>
                        }

                        @if (((ICommandColumnModel)colModel).DeleteButtonVisible.Value)
                        {
                            <button style="margin-left:2px;margin-right:2px;" class="btn btn-danger btn-sm;" @onclick="@(() => RowDeleteBegin(RowModel))" @onmousedown="()=> { }" @onmousedown:stopPropagation>delete</button>
                        }
                    </div>
                </td>
                break;
        }
    }
    <th id="@(ColumnService.EmptyColumnModel.EmptyDataColumnCellId)"></th>
</tr>
@if (TemplateService.DetailRowTemplate.Value != null && RowDetailService.ExpandedRowDetails.Value.Contains(RowModel.DataItem))
{
    <tr>
        <td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;">
            <div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
            </div>
        </td>
        <td colspan="@ColumnService.AllColumnModels.Where(c => c.ColumnType == DataGridColumnType.Data || c.ColumnType == DataGridColumnType.Command).Count()">
            @TemplateService.DetailRowTemplate.Value(RowModel.DataItem)
        </td>
    </tr>
}
