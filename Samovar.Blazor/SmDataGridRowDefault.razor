@typeparam T
@inherits SmDesignComponentBase


<tr id="@RowModel.HtmlElementId" style="cursor:pointer;"
	@onmousedown="@(()=>RowSelectedIntern(new GridRowEventArgs(RowModel.DataItem, RowModel.DataItemPosition), RowModel))"
	@ondblclick="@(()=>FireRowDoubleClick(new GridRowEventArgs(RowModel.DataItem, RowModel.DataItemPosition), RowModel))"
	class="@(_rowModel.RowSelected?$"{LayoutService.SelectedRowClass.SubjectValue}":"")">
	@if (LayoutService.ShowDetailRow.SubjectValue)
	{
		<td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;"  @onmousedown="()=> { }" @onmousedown:stopPropagation @onclick="GridRow.DetailExpanderClick">
			<div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
				<span class="@(RowModel.RowDetailExpanded ? "oi oi-chevron-bottom" : "oi oi-chevron-right")" ></span>
			</div>
		</td>
	}
	@foreach (IColumnModel colModel in ColumnService.AllColumnModels)
	{
		switch (colModel.ColumnType)
		{
			case DataGridColumnType.Data:
				var cellModel = RowModel.GridCellModels.SingleOrDefault(x => x.ColumnMetadata.Equals(colModel));
				if (cellModel != null)
				{
					<td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;padding-right:0;">
						@if (((IDataColumnModel)colModel).CellShowTemplate.SubjectValue != null)
						{
							<div class="s-flex" style="margin:0px;padding:0px;">
								<div style="flex-grow:1;" class="ml-1 mr-0">
									@(((IDataColumnModel)colModel).CellShowTemplate.SubjectValue(RowModel.DataItem))
								</div>
								<div style="cursor:ew-resize;float:right;width:3px" @onmousedown="((args)=>MouseDownOnResizeColumnGrip(args, cellModel.ColumnMetadata))"></div>
							</div>
						}
						else
						{
							<div class="s-flex" style="margin:0px;padding:0px;">
								<div style="flex-grow:1;" class="ml-1 mr-0">@cellModel.CellValue</div>
								<div style="cursor:ew-resize;float:right;width:3px" @onmousedown="((args)=>MouseDownOnResizeColumnGrip(args, cellModel.ColumnMetadata))"></div>
							</div>
						}
					</td>
				}

				break;
			case DataGridColumnType.Command:
				<td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;">
					<div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
						@if (((ICommandColumnModel)colModel).EditButtonVisible.SubjectValue)
						{
							<button style="margin-left:2px;margin-right:2px;" class="btn btn-primary btn-sm" @onclick="@(()=>RowEditBegin(RowModel))" @onmousedown="()=> { }" @onmousedown:stopPropagation>edit</button>
						}

						@if (((ICommandColumnModel)colModel).DeleteButtonVisible.SubjectValue)
						{
							<button style="margin-left:2px;margin-right:2px;" class="btn btn-danger btn-sm" @onclick="@(() => RowDeleteBegin(RowModel))" @onmousedown="()=> { }" @onmousedown:stopPropagation>delete</button>
						}
					</div>
				</td>
				break;
		}
	}
	<th style="@(ColumnService.EmptyColumnModel.VisibleWidthStyle)" id="@(ColumnService.EmptyColumnModel.EmptyDataColumnCellId)">
		<div style="margin:0px;padding:0px;overflow:hidden;display:block;">&nbsp;</div>
	</th>
</tr>
@if (TemplateService.DetailRowTemplate.SubjectValue != null && RowDetailService.ExpandedRowDetails.SubjectValue.Contains(RowModel.DataItem))
{
	<tr>
		<td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;">
			<div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
			</div>
		</td>
		<td colspan="@ColumnService.AllColumnModels.Where(c => c.ColumnType == DataGridColumnType.Data || c.ColumnType == DataGridColumnType.Command).Count()">
			@TemplateService.DetailRowTemplate.SubjectValue(RowModel.DataItem)
		</td>
	</tr>
}
