@page "/filter"

@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using System

@inject WeatherForecastService ForecastService

<h1>Filter</h1>

<div class="form-group row">
    <label for="filterMode" class="col-1 col-form-label m-2">Filter mode</label>
    <div class="col-1 m-2">
        <select id="filterMode" class="form-select form-select-lg" @bind=filterMode>
            <option value=@GridFilterMode.None>None</option>
            <option value=@GridFilterMode.Custom>Custom</option>
            <option value=@GridFilterMode.FilterRow>FilterRow</option>
        </select>
    </div>
    <button class="col-2 btn btn-primary m-3" @onclick="ApplyCustomFilter">Apply custom filter</button>
    <button class="col-2 btn btn-primary m-3" @onclick="ResetCustomFilter">reset custom filter</button>
</div>

<SmGrid @ref=grid
        Data=forecasts
        FilterMode=filterMode
        Height="600px">
    <Columns>
        <Column Field="@nameof(WeatherForecast.Summary)" />
        <Column Field="@nameof(WeatherForecast.Date)" />
        <Column Field="@nameof(WeatherForecast.TemperatureC)" />
    </Columns>
</SmGrid>


@code {
    private List<WeatherForecast>? forecasts;
    SmGrid<WeatherForecast>? grid;
    GridFilterMode filterMode = GridFilterMode.Custom;

    protected override async Task OnInitializedAsync()
    {
        forecasts = (await ForecastService.GetForecastAsync(DateTime.Now)).ToList();
    }

    async Task ApplyCustomFilter()
    {
        Func<WeatherForecast, bool> filter = w => w.Summary.ToLower() == "cool";
        await grid!.ApplyCustomFilter(filter);
    }

    async Task ResetCustomFilter()
    {
        await grid!.ResetCustomFilter();
    }
}
