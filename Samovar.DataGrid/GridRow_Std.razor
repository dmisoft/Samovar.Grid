@typeparam TItem
<CascadingValue Value=this Name="datagrid-row">
    <tr id="@RowModel.HtmlElementId" style="cursor:pointer;"
        @onmousedown="@(()=>DataGrid.RowSelectedIntern(new GridRowEventArgs(RowModel.RowModel.Data, RowModel.DataItemPosition), RowModel))"
        @ondblclick="@(()=>DataGrid.FireRowDoubleClick(new GridRowEventArgs(RowModel.RowModel.Data, RowModel.DataItemPosition), RowModel))"
        class="@(RowModel.RowSelected?$"{DataGrid.SelectedRowClass}":"")" >
        @if (DataGrid.ShowDetailRow)
        {
            <td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;">
                <div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
                    <span class="@(GridRow.ShowDetailPanel ? "oi oi-chevron-bottom" : "oi oi-chevron-right")" @onclick="GridRow.DetailExpanderClick"></span>
                </div>
            </td>
        }
        @foreach (ColumnMetadata colMeta in GridColumnService.Columns.Values.Where(md => md.ColumnType == GridColumnType.Data || md.ColumnType == GridColumnType.Command).OrderBy(cm => cm.ColumnOrder))
        {
            switch (colMeta.ColumnType)
            {
                case GridColumnType.Data:
                    //TODO noch nicht stabil: if (cellModel != null) wieso ?
                    var cellModel = RowModel.RowModel.GridCellModelCollection.SingleOrDefault(x => x.ColumnMetadata.Equals(colMeta));
                    if (cellModel != null)
                    {
                        <td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;padding-right:0;">
                            @if (GridColumnService.CellTemplateList[cellModel.ColumnMetadata.Id].CellShowTemplate != null)
                            {
                                <div class="s-flex" style="margin:0px;padding:0px;">
                                    <div style="flex-grow:1;" class="ml-1 mr-0">
                                        @GridColumnService.CellTemplateList[cellModel.ColumnMetadata.Id].CellShowTemplate(RowModel.RowModel.Data)
                                    </div>
                                    <div style="cursor:ew-resize;float:right;width:3px" @onmousedown="((args)=>MouseDownOnResizeColumnGrip(args, cellModel.ColumnMetadata))"></div>
                                </div>
                            }
                            else
                            {
                                <div class="s-flex" style="margin:0px;padding:0px;">
                                    <div style="flex-grow:1;" class="ml-1 mr-0">@cellModel.CellValue</div>
                                    <div style="cursor:ew-resize;float:right;width:3px" @onmousedown="((args)=>MouseDownOnResizeColumnGrip(args, cellModel.ColumnMetadata))"></div>
                                </div>
                            }
                        </td>
                    }

                    break;
                case GridColumnType.Command:
                    <td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;">
                        <div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
                            @if (colMeta.EditButtonVisible)
                            {
                                <button style="margin-left:2px;margin-right:2px;" class="btn btn-primary btn-sm" @onclick="@(()=>RowEditBegin(RowModel))" @onmousedown="()=> { }" @onmousedown:stopPropagation>edit</button>
                            }

                            @if (colMeta.DeleteButtonVisible)
                            {
                                <button style="margin-left:2px;margin-right:2px;" class="btn btn-danger btn-sm" @onclick="@(() => RowDeleteBegin(RowModel))" @onmousedown="()=> { }" @onmousedown:stopPropagation>delete</button>
                            }
                        </div>
                    </td>
                    break;
            }
        }
    </tr>
    @if (DataGrid.DetailRowTemplate != null && GridRow.ShowDetailPanel)
    {
        <tr>
            <td style="text-overflow:ellipsis !important;overflow: hidden !important;white-space: nowrap !important;">
                <div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
                    
                </div>
            </td>
            <td colspan="@GridColumnService.Columns.Where(c => c.Value.ColumnType == GridColumnType.Data || c.Value.ColumnType == GridColumnType.Command).Count()">
                @DataGrid.DetailRowTemplate(RowModel.dataItem)
            </td>
        </tr>
    }
</CascadingValue>