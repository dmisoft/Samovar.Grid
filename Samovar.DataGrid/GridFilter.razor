@using System.Globalization
@typeparam TItem

@if (GridColumnService.Columns != null)
{
    <table style="margin:0;padding:0;table-layout:fixed;@(DataGrid.MinGridWidth > 0 ? "min-width:" + DataGrid.MinGridWidth.ToString(CultureInfo.InvariantCulture) + "px;" : "")" class="@DataGrid.TableTagClass">
        <thead class="@DataGrid.TheadTagClass">
            <tr @ref="DataGrid.GridFilterRef">
                @if (DataGrid.ShowDetailRow)
                {
                    <th style="@(GridColumnService.DetailExpanderColumn.Value.VisibleWidthStyle)" id="@(GridColumnService.DetailExpanderColumn.Value.FilterGridColumnCellId)">
                        <div style="margin:0px;padding:0px;overflow:hidden;cursor:pointer;display:block;">&nbsp;</div>
                    </th>
                }
                @foreach (ColumnMetadata colMeta in GridColumnService.Columns.Values.Where(md => md.ColumnType == GridColumnType.Data || md.ColumnType == GridColumnType.Command).OrderBy(cm => cm.ColumnOrder))
                {
                    switch (colMeta.ColumnType)
                    {
                        case GridColumnType.Data:
                            <th style="@(colMeta.VisibleWidthStyle)" class="px-1" id="@(colMeta.FilterGridColumnCellId)" data-toggle="tooltip" data-placement="top" title="@(colMeta.Title)">
                                @if (colMeta.Field != null && DataGrid.rx.GridModelService.PropInfo.ContainsKey(colMeta.Field))
                                {
                                    @switch (DataGrid.rx.GridModelService.PropInfo[colMeta.Field].PropertyType)
                                    {
                                        case var t when t == typeof(DateTime) || t == typeof(DateTime?):
                                            <GridFilterCellDate TItem=TItem ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(string):
                                            <GridFilterCellString TItem=TItem ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(char):
                                            <GridFilterCellChar TItem=TItem ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(bool):
                                            <GridFilterCellBoolean TItem=TItem ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(byte) || t == typeof(byte?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="byte?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(sbyte) || t == typeof(sbyte?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="sbyte?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(short) || t == typeof(short?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="short?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(ushort) || t == typeof(ushort?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="ushort?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(int) || t == typeof(int?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="int?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(uint) || t == typeof(uint?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="uint?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(long) || t == typeof(long?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="long?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(ulong) || t == typeof(ulong?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="ulong?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(float) || t == typeof(float?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="float?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(double) || t == typeof(double?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="double?" ColMetadata="colMeta" />
                                            break;
                                        case var t when t == typeof(decimal) || t == typeof(decimal?):
                                            <GridFilterCellNumeric TEntity=TItem TValue="decimal?" ColMetadata="colMeta" />
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            </th>
                            break;
                        case GridColumnType.Command:
                            <th style="@(colMeta.VisibleWidthStyle)" id="@(colMeta.FilterGridColumnCellId)" data-toggle="tooltip" data-placement="top" title="@(colMeta.Title)">
                                <div class="s-flex s-flex-row s-align-content-center s-justify-content-center">
                                    <button class="btn btn-sm btn-primary" @onclick="@(async ()=>
                                                                               {
                                                                                   DataGrid.rx.GridModelService.ResetFilter();
                                                                                   await DataGrid.NotifierService.OnClearFilter();
                                                                                   DataGrid.ProcessFilter();

                                                                               })">
                                        Clear
                                    </button>
                                </div>
                            </th>

                            break;
                    }
                }
                @foreach (var colMeta in GridColumnService.Columns.Values.Where(md => md.ColumnType == GridColumnType.EmptyColumn))
                {
                    <th style="@(colMeta.VisibleWidthStyle)" id="@(colMeta.FilterGridColumnCellId)">
                        <div style="margin:0px;padding:0px;overflow:hidden;cursor:pointer;display:block;">&nbsp;</div>
                    </th>
                }
            </tr>
        </thead>
    </table>
}