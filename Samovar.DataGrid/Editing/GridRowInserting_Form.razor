@namespace Samovar.DataGrid
@typeparam TItem

<div class="row">
	@foreach (var cellModel in RowModel.EditingRowModel.GridCellModelCollection.OrderBy(cm => cm.ColumnMetadata.ColumnOrder))
	{
		<div class="col-6">
			<div class="form-group">
				<label for="todo">@cellModel.ColumnMetadata.Title</label>
				@if (GridColumnService.CellTemplateList[cellModel.ColumnMetadata.Id].CellEditTemplate != null)
				{
					<div style="overflow:hidden !important;width:100%;">
						@GridColumnService.CellTemplateList[cellModel.ColumnMetadata.Id].CellEditTemplate(RowModel.EditingRowModel.Data)
					</div>
				}
				else
				{
					@if (cellModel.Pi != null && cellModel.Pi.CanWrite)
					{
						@if (cellModel.Pi.PropertyType == typeof(string))
						{
							<GridEditCellString PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
						}
						else if (cellModel.Pi.PropertyType == typeof(char))
						{
							<GridEditCellChar PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
						}
						else if (cellModel.Pi.PropertyType == typeof(bool))
						{
							<GridEditCellBoolean PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
						}
						else
						{
							@switch (cellModel.Pi.PropertyType)
							{
								case var t when t == typeof(DateTime) || t == typeof(DateTime?):
									<GridEditCellDate PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(byte) || t == typeof(byte?):
									<GridEditCellNumeric TValue="byte?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(sbyte) || t == typeof(sbyte?):
									<GridEditCellNumeric TValue="sbyte?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(short) || t == typeof(short?):
									<GridEditCellNumeric TValue="short?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(ushort) || t == typeof(ushort?):
									<GridEditCellNumeric TValue="ushort?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(int) || t == typeof(int?):
									<GridEditCellNumeric TValue="int?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(uint) || t == typeof(uint?):
									<GridEditCellNumeric TValue="uint?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(long) || t == typeof(long?):
									<GridEditCellNumeric TValue="long?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(ulong) || t == typeof(ulong?):
									<GridEditCellNumeric TValue="ulong?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(float) || t == typeof(float?):
									<GridEditCellNumeric TValue="float?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(double) || t == typeof(double?):
									<GridEditCellNumeric TValue="double?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								case var t when t == typeof(decimal) || t == typeof(decimal?):
									<GridEditCellNumeric TValue="decimal?" TEntity=TItem PropInfo="cellModel.Pi" Data="RowModel.EditingRowModel.Data" />
									break;
								default:
									break;
							}
						}
					}
					else
					{
						@if (GridColumnService.CellTemplateList[cellModel.ColumnMetadata.Id].CellShowTemplate != null)
						{
							@GridColumnService.CellTemplateList[cellModel.ColumnMetadata.Id].CellShowTemplate(RowModel.RowModel.Data)
						}
						else
						{
							@cellModel.CellValue
						}
					}
				}
			</div>
		</div>
	}
</div>
<div class="row">
	<div class="col s-flex justify-content-end">
		<button class="btn btn-outline-primary mx-1" @onclick="@(() => DataGrid.GridEditingService.RowInsertingCommit())">insert</button>
		<button class="btn btn-outline-secondary mx-1" @onclick="@(() => DataGrid.GridEditingService.RowInsertingCancel())">cancel</button>
	</div>
</div>

