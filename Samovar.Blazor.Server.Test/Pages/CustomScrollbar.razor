@using System.Globalization
<!-- CustomScrollbarThumb.razor -->
@inject IJSRuntime jsRuntime
@inherits ComponentBase

<div class="custom-scrollbar">
    <div class="custom-scrollbar-thumb" id="customScrollbarThumb" @onmousedown="HandleMouseDown" style=@($"transform:translateY({newTranslateY.ToString(CultureInfo.InvariantCulture)}px);top:0;")></div>
</div>
@* style="transform:translateY(@(offsetY.ToString(CultureInfo.InvariantCulture) + "px")) *@
@code {
    private bool isDragging = false;
    private double startDraggingY;
    private double actualTranslateY { get; set; }
    private double newTranslateY { get; set; }

    [Parameter]
    public EventCallback<double> DeltaChangedCallback { set; get; }

    private void HandleMouseDown(MouseEventArgs e)
    {
        isDragging = true;
        startDraggingY = e.ClientY;

        // Subscribe to global mousemove and mouseup events using JavaScript Interop
        jsRuntime.InvokeVoidAsync("customScrollbar.handleMouseDown", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public void HandleMouseMove(int clientY)
    {
        if (isDragging)
        {
            var deltaY = clientY - startDraggingY;
            jsRuntime.InvokeVoidAsync("customScrollbar.handleMouseMove", deltaY);

            if (actualTranslateY + deltaY < 0)
            {
                newTranslateY = 0;
            }
            else if (actualTranslateY + deltaY + 40 > 200)
            {
                newTranslateY = 200 - 40;
            }
            else
            {
                newTranslateY = actualTranslateY + deltaY;
            }
            DeltaChangedCallback.InvokeAsync(newTranslateY);
            StateHasChanged();

        }
    }

    [JSInvokable]
    public void HandleMouseUp()
    {
        isDragging = false;
        actualTranslateY = newTranslateY;

        // Unsubscribe from global mousemove and mouseup events using JavaScript Interop
        jsRuntime.InvokeVoidAsync("customScrollbar.handleMouseUp");
    }
}
