@page "/fetchdata"

@using Samovar.Blazor.Server.Test.Data
@using System.ComponentModel.DataAnnotations
@using System

@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

@if (forecasts1 == null || forecasts2 == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<button class="btn btn-primary" @onclick="loadData">load data</button>
	<button class="btn btn-primary" @onclick="changeStyle">change style</button>
	<button class="btn btn-primary" @onclick="changeFirstDataItem">change first data item</button>
	<button class="btn btn-primary" @onclick="deselectSingleSelectedItem">deselct single selected item</button>
	<div class="row">
		<div class="col-10">
			<SmDataGrid Data="forecasts1"
					FilterMode=DataGridFilterMode.FilterRow
					Height="450px" ShowDetailRow=true
					EditMode=GridEditMode.Popup
					DataNavigationMode=DataGridNavigationMode.Paging
					PageSize="5"
					PagerSize="7"
					SelectionMode=GridSelectionMode.SingleSelectedDataRow
					@bind-SingleSelectedDataRow=selectedRow>
				<Columns>
					<SmDataGridColumn Title="Date" Field="@nameof(WeatherForecast.Date)" Width="100px">
						<CellShowTemplate>
							@{
								WeatherForecast data = context as WeatherForecast;
							<div>Template @data?.Summary</div>
						}
					</CellShowTemplate>
				</SmDataGridColumn>
				<SmDataGridColumn Title="TemperatureC" Field="@nameof(WeatherForecast.TemperatureC)" Width="200px"></SmDataGridColumn>
				<SmDataGridColumn Title="TemperatureF" Field="@nameof(WeatherForecast.TemperatureF)" Width="200px"></SmDataGridColumn>
				<SmDataGridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)" Width="200px"></SmDataGridColumn>
				<SmDataGridCommandColumn EditButtonVisible=true NewButtonVisible=true Width="250px"></SmDataGridCommandColumn>
			</Columns>
			<DetailRowTemplate Context="mydata">
				@{
						WeatherForecast data = mydata as WeatherForecast;
					<div>
						<SmDataGrid Data="@forecasts1"
								PageSize="10">
							<Columns>
								<SmDataGridColumn Title="Date" Field="@nameof(WeatherForecast.Date)" />
								<SmDataGridColumn Title="TemperatureC" Field="@nameof(WeatherForecast.TemperatureC)" />
								<SmDataGridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)" />
							</Columns>
						</SmDataGrid>
					</div>
				}
			</DetailRowTemplate>
		</SmDataGrid>
	</div>
	<div class="col-2">
		@if (selectedRow != null)
			{
				<div>@("Summary " + selectedRow.Summary + " Temp. " + selectedRow.TemperatureC)</div>
			}
		</div>
	</div>


	<div class="row">
		<div class="col-10">
			<SmDataGrid @ref=grid
					Data="forecasts2"
					FilterMode=DataGridFilterMode.FilterRow
					Height="@height"
					RowEditBegin="@((WeatherForecast data) => RowEditBeginHandler(data))"
					RowInsertBegin=@RowInsertBeginHandler
					EditMode=GridEditMode.Form
					DataNavigationMode=DataGridNavigationMode.VirtualScrolling
					SelectionMode=GridSelectionMode.MultipleSelectedDataRows
					@bind-MultipleSelectedDataRows=selectedRows>
				<Columns>
					<SmDataGridCommandColumn EditButtonVisible=true NewButtonVisible=true Width="150px" />
					<SmDataGridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)" Width="200px"></SmDataGridColumn>
					<SmDataGridColumn Title="Summary" Field="@nameof(WeatherForecast.Summary)"></SmDataGridColumn>
					<SmDataGridColumn Title="Date" Field="@nameof(WeatherForecast.Date)"></SmDataGridColumn>
					<SmDataGridColumn Title="TemperatureC" Field="@nameof(WeatherForecast.TemperatureC)"></SmDataGridColumn>
					<SmDataGridColumn Title="TemperatureF" Field="@nameof(WeatherForecast.TemperatureF)"></SmDataGridColumn>
				</Columns>
				<EditFormTemplate>
					<EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit=HandleValidSubmit>
						<DataAnnotationsValidator />
						<h5>Edit-Modus</h5>
						<div class="row">
							<div class="col-6">
								<div class="form-group">
									<label>Temp.C</label>
									<InputText @bind-Value="EditContext.Summary" />
								</div>
							</div>
						</div>
						<div class="row">
							<ValidationSummary />
						</div>
						<div class="row">
							<div class="col s-flex justify-content-end">
								<button type="submit" class="btn btn-outline-primary mx-1">aktuallisieren</button>
								<button type="button" class="btn btn-outline-secondary mx-1" @onclick="OnCancelButtonClick">abbrechen</button>
							</div>
						</div>
					</EditForm>
				</EditFormTemplate>
				<InsertFormTemplate>
					<EditForm Model="@InsertContext" Context="EditFormContext" OnValidSubmit=HandleValidInsertingSubmit>
						<DataAnnotationsValidator />
						<h5>Insert-Mode</h5>
						<div class="row">
							<div class="col-6">
								<div class="form-group">
									<label>Temp.C</label>
									<InputText @bind-Value="InsertContext.Summary" />
								</div>
							</div>
						</div>
						<div class="row">
							<ValidationSummary />
						</div>
						<div class="row">
							<div class="col s-flex justify-content-end">
								<button type="submit" class="btn btn-outline-primary mx-1">create</button>
								<button type="button" class="btn btn-outline-secondary mx-1" @onclick="OnCancelInsertingButtonClick">cancel</button>
							</div>
						</div>
					</EditForm>
				</InsertFormTemplate>
			</SmDataGrid>
		</div>
		<div class="col-2">
			@if (selectedRows != null)
			{
				@foreach (var selectedRow in selectedRows)
				{
					<div>@("Summary " + selectedRow.Summary + " Temp. " + selectedRow.TemperatureC)</div>
				}
			}
		</div>
	</div>

}

@code {
	private List<WeatherForecast> forecasts1;
	private List<WeatherForecast> forecasts2;
	FormEditContext EditContext = null;
	FormInsertContext InsertContext = null;
	SmDataGrid<WeatherForecast> grid;

	WeatherForecast selectedRow = null;
	IEnumerable<WeatherForecast> selectedRows = null;

	protected override async Task OnInitializedAsync()
	{
		forecasts1 = (await ForecastService.GetForecastAsync(DateTime.Now)).ToList();
		forecasts2 = (await ForecastService.GetForecastAsync(DateTime.Now)).ToList();

		selectedRow = forecasts1.First();
	}

	async Task loadData()
	{
		forecasts1 = (await ForecastService.GetForecastAsync(DateTime.Now)).ToList();
		forecasts2 = (await ForecastService.GetForecastAsync(DateTime.Now)).ToList();
	}

	string height = "450px";
	Task changeStyle()
	{
		height = "800px";
		return Task.CompletedTask;
	}

	Task changeFirstDataItem()
	{
		forecasts1[0].Summary = "my summary 1";
		forecasts2[0].Summary = "my summary 2";
		return Task.CompletedTask;
	}

	void RowEditBeginHandler(WeatherForecast item)
	{
		EditContext = new FormEditContext(item);
	}

	//void InitializeNewRowHandler(Dictionary<string, object> properties)
	//{

	//}

	void RowInsertBeginHandler()
	{
		InsertContext = new FormInsertContext();
		EditContext c;
	}

	async Task HandleValidSubmit()
	{
		EditContext.DataItem.Summary = EditContext.Summary;
		await grid.CancelRowEdit();
	}

	async Task HandleValidInsertingSubmit()
	{
		var newItem = new WeatherForecast
			{
				Summary = InsertContext.Summary,
				Date = DateTime.Now,
				TemperatureC = 32
			};

		forecasts2 = ((new WeatherForecast[] { newItem }).Concat(forecasts2)).ToList();

		await grid.CancelRowInsert();

		StateHasChanged();
	}

	async Task OnCancelButtonClick()
	{
		await grid.CancelRowEdit();
		EditContext = null;
	}
	async Task OnCancelInsertingButtonClick()
	{
		await grid.CancelRowInsert();
		EditContext = null;
	}
	Task deselectSingleSelectedItem()
	{
		selectedRow = null;
		return Task.CompletedTask;
	}

	class FormEditContext
	{
		public FormEditContext(WeatherForecast dataItem)
		{
			DataItem = dataItem;
			//Summary = DataItem.Summary;
			//Region = DataItem.Region;
			//City = DataItem.City;
		}

		public WeatherForecast DataItem { get; set; }

		[Required]
		[StringLength(maximumLength: 32, MinimumLength = 4, ErrorMessage = "The description should be 4 to 32 characters.")]
		public string Summary { get; set; }

		//public Action StateHasChanged { get; set; }
	}

	internal class FormInsertContext
	{
		internal FormInsertContext()
		{
			Summary = "init value";
			//Region = DataItem.Region;
			//City = DataItem.City;
		}

		[Required]
		[StringLength(maximumLength: 32, MinimumLength = 4, ErrorMessage = "The description should be 4 to 32 characters.")]
		public string Summary { get; set; }
	}
}
