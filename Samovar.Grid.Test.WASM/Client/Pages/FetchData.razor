@page "/fetchdata"
@using Samovar.Grid.Test.WASM.Shared
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>wird geladen...</em></p>
}
else
{
    <SamovarGrid Data="forecasts"
                 FilterMode="GridFilterMode.FilterRow"
                 Height="600px"
                 EditMode="GridEditMode.Form"
                 SelectionMode="GridSelectionMode.MultipleSelectedDataRows"
                 @ref="grid" TableTagClass="table table-sm table-striped">
        <GridColumns>
            <GridColumn Field="@nameof(WeatherForecast.Date)" />
            <GridColumn Field="@nameof(WeatherForecast.TemperatureC)" />
            <GridColumn Field="@nameof(WeatherForecast.TemperatureF)" />
            <GridColumn Field="@nameof(WeatherForecast.Summary)" />
            <GridCommandColumn Width="150px"/>
        </GridColumns>
    </SamovarGrid>
}

@code {
    private List<WeatherForecast> forecasts;

    SamovarGrid<WeatherForecast> grid;

    //IEnumerable<WeatherForecast> selectedItems;
    //@*@bind-MultipleSelectedDataRows="@SelectedItems"*@
    //IEnumerable<WeatherForecast> SelectedItems
    //{
    //    get { return selectedItems; }
    //    set
    //    {
    //        selectedItems = value;
    //        InvokeAsync(StateHasChanged);
    //    }
    //}

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<List<WeatherForecast>>("WeatherForecast");
    }

    async Task RowEditCommitHandlerAsync(GridRowEditEventArgs<WeatherForecast> args)
    {
        WeatherForecast oldData = args.OldData;
        WeatherForecast newData = args.NewData;

        forecasts[forecasts.IndexOf(oldData)] = newData;

        await grid.RefreshAsync();
    }
}
